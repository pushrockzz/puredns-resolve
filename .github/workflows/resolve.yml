name: PureDNS Secondary Worker

on:
  workflow_dispatch:
    inputs:
      primary_github_server_url:
        description: 'The server URL of the primary GitHub instance (e.g., https://github.com)'
        required: true
        type: string
      primary_repo_owner:
        description: 'The owner of the primary repository that triggered this workflow.'
        required: true
        type: string
      primary_repo_name:
        description: 'The name of the primary repository that triggered this workflow.'
        required: true
        type: string
      primary_run_id:
        description: 'The run ID of the workflow in the primary repository.'
        required: true
        type: string
      chunk_package_artifact_name:
        description: 'The name of the artifact package containing all chunks and resolvers.'
        required: true
        type: string
      secondary_matrix_json:
        description: 'The JSON string representing the matrix of chunks assigned to this secondary worker.'
        required: true
        type: string

permissions:
  contents: write
  actions: read

env:
  SECONDARY_ACCOUNT_MAX_PARALLEL: 20

jobs:
  process_assigned_chunks_secondary:
    name: Process Assigned Chunks (Secondary Account)
    #if: github.event.inputs.secondary_matrix_json != '' && github.event.inputs.secondary_matrix_json != '[]'
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/pcoder7/spider-puredns-actions:latest
      credentials:
        username: ${{ secrets.GHCR_USER }}
        password: ${{ secrets.GHCR_TOKEN }}
    strategy:
      fail-fast: false
      max-parallel: 20
      matrix:
        pair: ${{ fromJson(github.event.inputs.secondary_matrix_json && github.event.inputs.secondary_matrix_json || '[]') }}
    steps:

      - name: Display Trigger Payload (Debug)
        run: |
          echo "SECONDARY WORKER: Received payload:"
          echo "${{ toJson(github.event.inputs) }}"
          echo "---"
          echo "SECONDARY WORKER: My assigned matrix for this job instance:"
          echo "${{ toJson(matrix.pair) }}"

      - name: Checkout repository (Account 2's repo)
        uses: actions/checkout@v3

      - name: Download Full Chunks Package from Primary Account
        env:
          GH_TOKEN_PRIMARY_ACCOUNT_READ: ${{ secrets.PAT_FOR_PRIMARY_ACCOUNT_ARTIFACTS_READ }}
          PRIMARY_REPO_OWNER: ${{ github.event.inputs.primary_repo_owner }}
          PRIMARY_REPO_NAME: ${{ github.event.inputs.primary_repo_name }}
          PRIMARY_RUN_ID: ${{ github.event.inputs.primary_run_id }}
          ARTIFACT_NAME_FROM_PRIMARY: ${{ github.event.inputs.chunk_package_artifact_name }}
        shell: bash
        run: |
          echo "SECONDARY WORKER: Downloading artifact '$ARTIFACT_NAME_FROM_PRIMARY' from $PRIMARY_REPO_OWNER/$PRIMARY_REPO_NAME, run ID $PRIMARY_RUN_ID"
          if ! command -v gh &> /dev/null; then
            echo "INFO: gh CLI not found. Installing..."
            apt-get update -qy
            apt-get install -qy curl
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            apt-get update -qy
            apt-get install -qy gh
            if ! command -v gh &> /dev/null; then
              echo "ERROR: gh CLI installation failed."
              exit 0
            fi
          fi

          echo "$GH_TOKEN_PRIMARY_ACCOUNT_READ" | gh auth login --with-token
          FULL_PRIMARY_REPO="$PRIMARY_REPO_OWNER/$PRIMARY_REPO_NAME"
          gh run download "$PRIMARY_RUN_ID" -R "$FULL_PRIMARY_REPO" -n "$ARTIFACT_NAME_FROM_PRIMARY" --dir .

          PACKAGE_FILENAME="$ARTIFACT_NAME_FROM_PRIMARY.tar.gz"
          if [ ! -f "$PACKAGE_FILENAME" ]; then
            echo "ERROR: Failed to download '$PACKAGE_FILENAME'."
            exit 0
          fi
          echo "Downloaded '$PACKAGE_FILENAME'."

      - name: Extract Chunks and Resolvers for Secondary
        shell: bash
        run: |
          PACKAGE_FILENAME="${{ github.event.inputs.chunk_package_artifact_name }}.tar.gz"
          echo "SECONDARY WORKER: Extracting $PACKAGE_FILENAME..."
          tar -xzvf "$PACKAGE_FILENAME"
          if [ ! -d "chunks" ] || [ ! -f "resolvers.txt" ]; then
            echo "ERROR: 'chunks/' or 'resolvers.txt' missing after extraction."
            exit 0
          fi
          echo "Extraction complete."
          ls -R chunks/
          ls resolvers.txt resolvers-trusted.txt

      - name: Install dsieve
        run: |
          if command -v dsieve &> /dev/null; then
            echo "dsieve is already installed"
          else
            echo "Installing dsieve..."
            go install github.com/trickest/dsieve@latest
          fi

      - name: Install Tools
        run: |
          # Installing smap
          if ! command -v smap >/dev/null; then
            echo "Installing smap…"
            go install -v github.com/s0md3v/smap/cmd/smap@latest
          else
            echo "smap already in cache"
          fi
          # Installing inscope
          if ! command -v inscope >/dev/null; then
            echo "Installing inscope…"
            go install -v github.com/tomnomnom/hacks/inscope@latest
          else
            echo "inscope already in cache"
          fi

          if ! command -v anew >/dev/null; then
            echo "Installing anew…"
            go install -v github.com/tomnomnom/anew@latest
          else
            echo "anew already in cache"
          fi

          if ! command -v cut-cdn >/dev/null; then
            echo "Installing cut-cdn…"
            go install github.com/ImAyrix/cut-cdn@latest
          else
            echo "cut-cdn already in cache"
          fi

          if ! command -v naabu >/dev/null; then
            echo "Installing naabu…"
            go install -v github.com/projectdiscovery/naabu/v2/cmd/naabu@latest
          else
            echo "naabu already in cache"
          fi

          pip3 install --no-cache-dir ipaddress

          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Fetch wordlists
        shell: bash
        run: |

          if [ ! -f resolvers.txt ]; then
              wget -qO resolvers.txt \
              https://raw.githubusercontent.com/rix4uni/resolvers/refs/heads/main/resolvers.txt
              echo "resolvers.txt is downloaded"
          fi
          if [ ! -f resolvers-trusted.txt ]; then
              wget -qO resolvers-trusted.txt \
              https://raw.githubusercontent.com/and0x00/resolvers.txt/refs/heads/main/resolvers.txt
              echo "resolvers-trusted.txt is downloaded"
          fi

      - name: Resolve Discovered Subdomains with PureDNS
        id: run_puredns
        shell: bash
        run: |
                RAW_RESULTS_FILE="raw_subdomain_results.txt"
                PUREDNS_FILE="puredns_file.txt"
                RESOLVED_FILE="puredns_resolved.txt"
                TMP_CLEANMASSDNS=$(mktemp)
                MASSDNS="massdns.txt"
                #WILDCARD_FILE="wildcard_sub.txt"
                MASSDNS_FILE="massdns_file.txt"
                
                if [ ! -s "$RAW_RESULTS_FILE" ]; then
                        echo "INFO: Raw results file is empty. Nothing to resolve."
                        touch "$PUREDNS_FILE" # Create an empty file to prevent downstream errors
                        exit 0
                fi

                wget -qO resolvers.txt https://raw.githubusercontent.com/rix4uni/resolvers/refs/heads/main/resolvers.txt
                
                wget -qO resolvers-trusted.txt https://raw.githubusercontent.com/and0x00/resolvers.txt/refs/heads/main/resolvers.txt
                          
                echo "INFO: Resolving subdomains using puredns..."
                # The container image includes a list of public resolvers at /opt/resolvers.txt
                puredns resolve "$RAW_RESULTS_FILE" \
                  -r resolvers.txt \
                  --resolvers-trusted resolvers.txt \
                  --rate-limit 3000 \
                  --wildcard-tests 300 \
                  --wildcard-batch 100000 \
                  --rate-limit-trusted 2000 \
                  --write "$PUREDNS_FILE" \
                  --write-massdns "$MASSDNS" \
                  --quiet >/dev/null 2>&1
                                     
                echo "✅ PureDNS resolution complete. $(wc -l < "$PUREDNS_FILE") subdomains were successfully resolved."
                echo "✅ Downloading .scope file from recon-automation repo"
                wget -qO .scope https://raw.githubusercontent.com/Pcoder7/recon-automation/refs/heads/main/.scope 
                echo  " $(wc -l < .scope) lines of scope file is downloaded " 
                
                cat "$PUREDNS_FILE" | inscope -s .scope > "$RESOLVED_FILE" || true
                # echo "✅ PureDNS resolution complete. $(wc -l < "$WILDCARD_FILE") Wildcard subdomains found."
                awk 'NF { sub(/\.$/,"",$1); print }' "$MASSDNS" > "$TMP_CLEANMASSDNS"
                awk ' \
                {gsub(/\r$/,"");sub(/^[ \t]+/,"");sub(/[ \t]+$/,"")} \
                FNR==NR{if($0)patterns[++c]=$0;next} \
                !setup{regex="";for(i=1;i<=c;i++){regex=regex (i>1?"|":"") "("patterns[i]")"};if(regex=="")regex="^\b$";setup=1} \
                $2=="A" && $1~regex \
                ' .scope "$TMP_CLEANMASSDNS" | anew -q "$MASSDNS_FILE"
                
                echo "✅ PureDNS resolution complete. $(wc -l < "$MASSDNS_FILE")  massdns found."     
                rm -f "$TMP_CLEANMASSDNS" "$MASSDNS" "$PUREDNS_FILE"        
     
      - name: Sort Resolved Results into Root Domain Folders
        shell: bash
        run: |
                RESOLVED_FILE="puredns_resolved.txt"
                MASSDNS_FILE="massdns_file.txt"
                mkdir -p results
                # -------------------------
                # Option B: in-memory awk filter
                # Keep only massdns lines whose hostname (first field) exists in RESOLVED_FILE
                # -------------------------
                # If massdns file doesn't exist or is empty -> nothing to do
                if [ ! -s "$MASSDNS_FILE" ]; then
                        echo "INFO: No massdns file ($MASSDNS_FILE) present or empty; skipping filter."
                else
                        # If resolved file empty -> produce empty MASSDNS_FILE (no extraneous junk)
                        if [ ! -s "$RESOLVED_FILE" ]; then
                                echo "INFO: Resolved file is empty -> clearing $MASSDNS_FILE per policy."
                                : > "$MASSDNS_FILE"
                        else
                                echo "INFO: Filtering $MASSDNS_FILE using allowlist from $RESOLVED_FILE (in-memory awk)."
                                TMP_FILTERED=$(mktemp)
                                awk '
                                # First pass: read allowlist (RESOLVED_FILE) and use first field as hostname
                                FNR==NR {
                                        gsub(/\r/,""); sub(/^[ \t]+|[ \t]+$/,"");
                                        sub(/\.$/,"");
                                        host=$1;              # <-- use first field (hostname) not entire line
                                        host=tolower(host);
                                        if(length(host)) allowed[host]=1;
                                        next
                                }
                                # Second pass: process massdns lines (MASSDNS_FILE)
                                NF {
                                        host=$1; sub(/\.$/,"",host);
                                        if(allowed[tolower(host)]) print $0;
                                }' "$RESOLVED_FILE" "$MASSDNS_FILE" > "$TMP_FILTERED"
                                # atomically replace original massdns file with filtered one
                                mv "$TMP_FILTERED" "$MASSDNS_FILE"
                                echo "INFO: Filtered massdns count: $(wc -l < "$MASSDNS_FILE" || true)"
                        fi
                fi
                # -------------------------
                # Build combined list (same as before)
                # -------------------------
                # Create a combined list of all subdomains from both files to find all possible root domains
                cat "$RESOLVED_FILE" 2>/dev/null > combined_subdomains.txt
                awk '{print $1}' "$MASSDNS_FILE" 2>/dev/null >> combined_subdomains.txt
                if [ ! -s "combined_subdomains.txt" ]; then echo "INFO: No resolvable data in this chunk."; exit 0; fi
                # Extract unique root domains from the combined list
                dsieve -if "combined_subdomains.txt" -f 2 | sort -u > temp_root_domains.txt
                while read -r parent; do
                        if [ -z "$parent" ]; then continue; fi; mkdir -p "results/$parent"
                        # Logic for puredns results (only if the source file has content)
                        if [ -s "$RESOLVED_FILE" ]; then
                                grep -E "(^|\\.)${parent//./\\.}(\$)" --color=never "$RESOLVED_FILE" | anew -q "results/$parent/puredns_results.txt" || true
                        fi
                        # Logic for massdns file (only if the source file has content)
                        if [ -s "$MASSDNS_FILE" ]; then
                                grep -E "(^|\\.)${parent//./\\.}(\s|\$)" --color=never "$MASSDNS_FILE" | anew -q "results/$parent/massdns_file.txt" || true
                        fi
                done < temp_root_domains.txt          

      - name: Compute SAFE_CHUNK (no slashes)
        run: |
          SAFE_CHUNK="${{ matrix.pair.chunk }}"
          SAFE_CHUNK="$(echo "$SAFE_CHUNK" | tr '/' '_')"
          echo "SAFE_CHUNK=$SAFE_CHUNK" >> $GITHUB_ENV

      - name: Upload Secondary Account Results
        uses: actions/upload-artifact@v4
        with:
          name: recon-results-secondary-${{ env.SAFE_CHUNK }}
          path: results/
          retention-days: 1

  # ====================================================================
  # JOB 4: Merge All Results (Identical to reference workflow)
  # ====================================================================
  merge_results:
    name: Merge All Distributed Results
    runs-on: ubuntu-latest
    needs: process_assigned_chunks_secondary    
    if: always()
    outputs:
      has_results: ${{ steps.check_artifacts.outputs.found }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
     
      - name: Download all result artifacts from all accounts
        uses: actions/download-artifact@v4
        with:
          pattern: 'recon-results-*'
          path: temp-aggregated-results
          merge-multiple: true
     
      - name: Check if artifacts were downloaded
        id: check_artifacts
        shell: bash
        run: |
          if [ -d "temp-aggregated-results" ] && [ -n "$(ls -A temp-aggregated-results)" ]; then
            echo "-> Artifacts found. Proceeding with merge."
            echo "found=true" >> $GITHUB_OUTPUT
          else
            echo "-> No artifacts found to merge. Skipping the rest of this job."
            echo "found=false" >> $GITHUB_OUTPUT
          fi
          
      
      - name: Consolidate all results into root domain folders
        id: consolidate
        shell: bash
        run: |
          set -e
          mkdir -p final_results
          if [ ! -d "temp-aggregated-results" ] || [ -z "$(ls -A temp-aggregated-results)" ]; then
            echo "::warning:: No result artifacts were found. Nothing to merge."
            echo "has_results=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "INFO: Aggregating all downloaded results..."
          for filepath in $(find temp-aggregated-results -type f -name "puredns_results.txt"); do
            parent_domain=$(basename "$(dirname "$filepath")")
            dest_file="final_results/$parent_domain/puredns_results.txt"
            mkdir -p "final_results/$parent_domain"
            cat "$filepath" >> "$dest_file"
          done
          echo "INFO: Aggregating subdomain port data..."
          for filepath in $(find temp-aggregated-results -type f -name "subdomain_ports.txt"); do
            parent_domain=$(basename "$(dirname "$filepath")")
            dest_file="final_results/$parent_domain/subdomain_ports.txt"
            mkdir -p "final_results/$parent_domain"
            cat "$filepath" >> "$dest_file"
          done
          echo "INFO: De-duplicating all aggregated files..."
          for final_file in $(find final_results -type f -name "*.txt"); do
              sort -u -o "$final_file" "$final_file"
          done
          if [ -z "$(ls -A final_results)" ]; then
            echo "::warning:: Result artifacts contained no valid data to merge."
            echo "has_results=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "has_results=true" >> $GITHUB_OUTPUT
          echo "✅ Successfully consolidated results from all accounts."
          ls -R final_results

      - name: Upload Final Consolidated Artifact
        if: steps.consolidate.outputs.has_results == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-recon-results
          path: final_results/
          retention-days: 1

  commit_all_results:
    name: Commit All Results
    needs: merge_results
    if: always() && needs.merge_results.outputs.has_results == 'true'
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/pcoder7/spider-puredns-actions:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN }}
    steps:
      - name: Download the single consolidated results artifact
        uses: actions/download-artifact@v4
        with:
          name: consolidated-recon-results
          path: final_results

      - name: Organize and Push to store-recon
        shell: bash
        env:
          STORE_RECON_PAT: ${{ secrets.PAT_FOR_SECONDARY }}
          ACCOUNT2_USERNAME: ${{ secrets.ACCOUNT2_REPO_OWNER }}
          STORE: ${{secrets.STORE}}
          CORRELATION_ID: ${{ github.event.inputs.primary_run_id }}
        run: |
          RESULTS_DIR="${GITHUB_WORKSPACE}/final_results"

          if [ ! -d "$RESULTS_DIR" ] || [ -z "$(ls -A "$RESULTS_DIR")" ]; then
            echo "::warning:: Results directory is empty or does not exist. Nothing to commit."
            exit 0
          fi
          
          echo "Cloning ${STORE} to commit results from secondary worker..."
          git config --global user.name "Secondary Worker Bot"
          git config --global user.email "actions-bot@users.noreply.github.com"
          
          TMP_DIR="$(mktemp -d)"
          if ! git clone "https://x-access-token:${STORE_RECON_PAT}@github.com/${ACCOUNT2_USERNAME}/${STORE}.git" "$TMP_DIR"; then
            echo "::error:: Failed to clone the repository. Aborting the commit process."
            exit 0
          fi
          cd "$TMP_DIR"
          
          # --- Reusable function to merge artifact data ---
          run_merge() {
            echo "Merging new secondary results into the repository..."
            for domain_dir in "${RESULTS_DIR}"/*; do
              if [ ! -d "$domain_dir" ]; then continue; fi
              domain_name=$(basename "$domain_dir")
              dest_repo_dir="results/$domain_name"
              mkdir -p "$dest_repo_dir"

              # SAFE MERGE 1 (Unchanged as requested)
              source_puredns_file="$domain_dir/puredns_results.txt"
              dest_all_subs_file="$dest_repo_dir/all_subdomains.txt"
              if [ -s "$source_puredns_file" ]; then
                <"$source_puredns_file" tr -d '\0' \
                  | grep '[[:alnum:]]' \
                  | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' \
                  | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g" \
                  > "$source_puredns_file.tmp" && mv "$source_puredns_file.tmp" "$source_puredns_file"   
                  
                temp_merged_file_1=$(mktemp)
                if [ -f "$dest_all_subs_file" ]; then cat "$source_puredns_file" "$dest_all_subs_file" | sort -u > "$temp_merged_file_1"; else sort -u "$source_puredns_file" > "$temp_merged_file_1"; fi
                mv "$temp_merged_file_1" "$dest_all_subs_file"
              fi
              
              # SAFE MERGE 2 (Unchanged as requested)
              source_ports_file="$domain_dir/subdomain_ports.txt"
              dest_puredns_file="$dest_repo_dir/puredns_result.txt"
              if [ -s "$source_ports_file" ]; then
                <"$source_ports_file" tr -d '\0' \
                  | grep '[[:alnum:]]' \
                  | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' \
                  | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g" \
                  > "$source_ports_file.tmp" && mv "$source_ports_file.tmp" "$source_ports_file"

                echo "  -> Merging port data into '$dest_puredns_file'"  
                temp_merged_file_2=$(mktemp)
                if [ -f "$dest_puredns_file" ]; then cat "$source_ports_file" "$dest_puredns_file" | sort -u > "$temp_merged_file_2"; else sort -u "$source_ports_file" > "$temp_merged_file_2"; fi
                mv "$temp_merged_file_2" "$dest_puredns_file"
              fi
            done
            
            # Stage all changes
            git add results/
          }

          # --- Main Logic ---

          # 1. Perform the initial merge and check for changes
          run_merge
          if git diff --cached --quiet; then
            echo "No new unique data to commit from secondary worker."
            exit 0
          fi
          
          # 2. Commit the changes locally
          echo "Committing changes locally..."
          git commit -m "feat: Add new assets from distributed permutation scan from Correlation ID: ${CORRELATION_ID}"
          
          # 3. Loop to sync and push the commit, with a robust retry mechanism
          MAX_ATTEMPTS=10
          for (( i=1; i<=MAX_ATTEMPTS; i++ )); do
            echo "[Attempt $i/$MAX_ATTEMPTS] Pushing changes..."
            
            # Optimistic push first
            if git push -v origin main; then
              echo "✅ Successfully pushed new secondary results to ${STORE} on attempt $i."
              exit 0 # Success!
            fi
            
            echo "::warning:: Push failed on attempt $i. Fetching latest changes from remote and re-applying local changes."
            
            # If push failed, fetch the latest state from the remote
            git fetch origin main
            if [ $? -ne 0 ]; then
                echo "::error:: Git fetch failed. Cannot safely retry."
                sleep $(( 5 * i ))
                continue # Try again
            fi
            
            # Reset local state to match remote, discarding the old local commit
            git reset --hard origin/main
            
            # Re-run the merge logic on top of the fresh, updated branch
            echo "Re-applying merge logic on top of the updated main branch..."
            run_merge
            
            # Check if there are still changes to commit after the re-merge
            if git diff --cached --quiet; then
              echo "No net new changes to commit after syncing with remote. Another run may have already pushed these results."
              exit 0
            fi
            
            # Re-commit the newly calculated changes
            echo "Re-committing changes for retry attempt..."
            git commit -m "feat: Add new assets from distributed permutation scan from Correlation ID: ${CORRELATION_ID} (retry)"

            sleep $(( 5 * i ))
          done

          echo "::error:: All $MAX_ATTEMPTS push attempts failed. The job will pass but the commit was NOT pushed."
          exit 0
 
