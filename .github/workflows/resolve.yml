name: PureDNS Secondary Worker

on:
  workflow_dispatch:
    inputs:
      primary_github_server_url:
        description: 'The server URL of the primary GitHub instance (e.g., https://github.com)'
        required: true
        type: string
      primary_repo_owner:
        description: 'The owner of the primary repository that triggered this workflow.'
        required: true
        type: string
      primary_repo_name:
        description: 'The name of the primary repository that triggered this workflow.'
        required: true
        type: string
      primary_run_id:
        description: 'The run ID of the workflow in the primary repository.'
        required: true
        type: string
      chunk_package_artifact_name:
        description: 'The name of the artifact package containing all chunks and resolvers.'
        required: true
        type: string
      secondary_matrix_json:
        description: 'The JSON string representing the matrix of chunks assigned to this secondary worker.'
        required: true
        type: string

permissions:
  contents: write
  actions: read

env:
  SECONDARY_ACCOUNT_MAX_PARALLEL: 20

jobs:
  process_assigned_chunks_secondary:
    name: Process Assigned Chunks (Secondary Account)
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/pcoder7/spider-puredns-actions:latest
      credentials:
        username: pcoder7
        password: ${{ secrets.GHCR_TOKEN }}
    strategy:
      fail-fast: false
      max-parallel: 20
      matrix:
        pair: ${{ fromJson(github.event.inputs.secondary_matrix_json && github.event.inputs.secondary_matrix_json || '[]') }}
    steps:

          
      - name: Display Trigger Payload (Debug)
        run: |
          echo "SECONDARY WORKER: Received payload:"
          echo "${{ toJson(github.event.inputs) }}"
          echo "---"
          echo "SECONDARY WORKER: My assigned matrix for this job instance:"
          echo "${{ toJson(matrix.pair) }}"

      - name: Checkout repository (Account 2's repo)
        uses: actions/checkout@v3

      - name: Download Full Chunks Package from Primary Account
        env:
          GH_TOKEN_PRIMARY_ACCOUNT_READ: ${{ secrets.PAT_FOR_PRIMARY_ACCOUNT_ARTIFACTS_READ }}
          PRIMARY_REPO_OWNER: ${{ github.event.inputs.primary_repo_owner }}
          PRIMARY_REPO_NAME: ${{ github.event.inputs.primary_repo_name }}
          PRIMARY_RUN_ID: ${{ github.event.inputs.primary_run_id }}
          ARTIFACT_NAME_FROM_PRIMARY: ${{ github.event.inputs.chunk_package_artifact_name }}
        shell: bash
        run: |
          echo "SECONDARY WORKER: Downloading artifact '$ARTIFACT_NAME_FROM_PRIMARY' from $PRIMARY_REPO_OWNER/$PRIMARY_REPO_NAME, run ID $PRIMARY_RUN_ID"
          if ! command -v gh &> /dev/null; then
            echo "INFO: gh CLI not found. Installing..."
            apt-get update -qy
            apt-get install -qy curl
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            apt-get update -qy
            apt-get install -qy gh
            if ! command -v gh &> /dev/null; then
              echo "ERROR: gh CLI installation failed."
              exit 1
            fi
          fi

          echo "$GH_TOKEN_PRIMARY_ACCOUNT_READ" | gh auth login --with-token
          FULL_PRIMARY_REPO="$PRIMARY_REPO_OWNER/$PRIMARY_REPO_NAME"
          gh run download "$PRIMARY_RUN_ID" -R "$FULL_PRIMARY_REPO" -n "$ARTIFACT_NAME_FROM_PRIMARY" --dir .

          PACKAGE_FILENAME="$ARTIFACT_NAME_FROM_PRIMARY.tar.gz"
          if [ ! -f "$PACKAGE_FILENAME" ]; then
            echo "ERROR: Failed to download '$PACKAGE_FILENAME'."
            exit 1
          fi
          echo "Downloaded '$PACKAGE_FILENAME'."
    
       
      - name: Extract Chunks and Resolvers for Secondary
        shell: bash
        run: |
          PACKAGE_FILENAME="${{ github.event.inputs.chunk_package_artifact_name }}.tar.gz"
          echo "SECONDARY WORKER: Extracting $PACKAGE_FILENAME..."
          tar -xzvf "$PACKAGE_FILENAME"
          if [ ! -d "chunks" ] || [ ! -f "resolvers.txt" ]; then
            echo "ERROR: 'chunks/' or 'resolvers.txt' missing after extraction."
            exit 1
          fi
          echo "Extraction complete."
          ls -R chunks/
          ls resolvers.txt resolvers-trusted.txt
      
      - name: Set up Go + dsieve
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
     
      - name: Install puredns and dsieve
        run: |
          if command -v dsieve &> /dev/null; then
            echo "dsieve is already installed"
          else
            echo "Installing dsieve..."
            go install github.com/trickest/dsieve@latest
          fi

      - name: Run puredns + pre-dsieve on subdomains + final filtering
        shell: bash
        run: |
          DOMAIN=${{ matrix.pair.domain }}
          CHUNK_FILE_PATH=${{ matrix.pair.chunk }}
          echo "SECONDARY WORKER: Processing domain '$DOMAIN' with chunk '$CHUNK_FILE_PATH'..."

          if [ ! -f "$CHUNK_FILE_PATH" ]; then
            echo "ERROR: Chunk file '$CHUNK_FILE_PATH' not found!"
            exit 1
          fi

          # Step A: pre-dsieve on raw subdomain chunk
          echo "-> Generating parent_domains.txt from raw subdomains..."
          dsieve -if "$CHUNK_FILE_PATH" -f 2 | sort -u > parent_domains.txt
          echo "  Parent count: $(wc -l < parent_domains.txt)"
          head -n 5 parent_domains.txt || true

          # Step B: Probe with puredns
          PUREDNS_OUT="puredns_output.txt"
          echo "-> Running Puredns (100 threads) against '$CHUNK_FILE_PATH'..."
          puredns resolve "$CHUNK_FILE_PATH" \
            -r resolvers.txt \
            --resolvers-trusted resolvers-trusted.txt \
            --write "$PUREDNS_OUT" \
            --write-wildcards "$WILDCARD_FILE" \
            --wildcard-batch 100000 --wildcard-tests 250 
            

          puredns_exit=$?
          if [ $puredns_exit -ne 0 ]; then
            echo "ERROR: puredns returned exit code $puredns_exit. Aborting chunk."
            exit 1
          fi

          # Always create results/ so upload-artifact sees at least an empty folder
          OUTPUT_ROOT="results"
          mkdir -p "$OUTPUT_ROOT"

          if [ ! -s "$PUREDNS_OUT" ]; then
            echo "No live hostnames found in this chunk. Leaving results/ empty."
            exit 0
          fi

          echo "-> Sample of puredns_output.txt (first 5 lines):"
          head -n 5 "$PUREDNS_OUT" || true

          # ───────────────────────────────────────────────────────────
          # Step C+D: For each parent domain, filter matching hostnames
          # ───────────────────────────────────────────────────────────
          echo "DEBUG: Starting per-parent filtering with AWK (domain-only mode)"
          while read -r parent; do
            # Strip any carriage returns or trailing whitespace
            clean_parent=$(printf '%s' "$parent" | tr -d '\r' | xargs)
            if [ -z "$clean_parent" ]; then
              echo "DEBUG: Skipping empty parent line"
              continue
            fi

            echo "DEBUG: Processing parent => [[$clean_parent]]"
            mkdir -p "$OUTPUT_ROOT/$clean_parent"
            outfile="$OUTPUT_ROOT/$clean_parent/puredns_result.txt"

            echo "DEBUG: AWK filtering host==$clean_parent or subdomain of $clean_parent from $PUREDNS_OUT into $outfile"

            awk -v b="$clean_parent" '
            {
              host = $1
              if (host == b || host ~ ("\\." b "$")) {
                print $0
              }
            }
            ' "$PUREDNS_OUT" > "$outfile" 2>/tmp/awk_error.log
            awk_exit=$?
            if [ $awk_exit -ne 0 ]; then
              echo "ERROR: AWK exited with code $awk_exit for parent='$clean_parent'."
              echo "DEBUG: Contents of /tmp/awk_error.log:"
              cat /tmp/awk_error.log || true
            fi

            if [ -f "$outfile" ]; then
              lines_written=$(wc -l < "$outfile")
              echo "DEBUG: '$outfile' contains $lines_written line(s)."
              if [ $lines_written -gt 0 ]; then
                echo "DEBUG: Sample lines from '$outfile':"
                head -n 3 "$outfile" || true
              else
                echo "DEBUG: '$outfile' is empty."
              fi
            else
              echo "DEBUG: '$outfile' was not created."
            fi

          done < parent_domains.txt
          echo "-> Split complete for domain '$DOMAIN'."
          mkdir -p results
      
      - name: Compute SAFE_CHUNK (no slashes)
        run: |
          SAFE_CHUNK="${{ matrix.pair.chunk }}"
          SAFE_CHUNK="$(echo "$SAFE_CHUNK" | tr '/' '_')"
          echo "SAFE_CHUNK=$SAFE_CHUNK" >> $GITHUB_ENV              

      - name: Upload Secondary Account puredns+dsieve Results (as artifact)
        uses: actions/upload-artifact@v4
        with:
          name: secondary_puredns_dsieve_${{ matrix.pair.domain }}_${{ env.SAFE_CHUNK }}
          path: results/
          retention-days: 1

  commit_all_secondary_results:
    name: Commit All Secondary Results
    needs: process_assigned_chunks_secondary
    if: always()
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/pcoder7/spider-puredns-actions:latest
      credentials:
        username: ${{ secrets.GHCR_USER }}
        password: ${{ secrets.GHCR_TOKEN }}        
    steps:
      - name: Checkout repository (Account 2's repo)
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download all 'secondary_puredns_dsieve_*' artifacts from this workflow run
        uses: actions/download-artifact@v4
        with:
          pattern: secondary_puredns_dsieve_*
          path: temp_results
      
      - name: Organize and Push Results to store-recon  
        shell: bash  
        env:  
          STORE_RECON_PAT: ${{ secrets.STORE_RECON_PAT }}  
          STORE: ${{ secrets.STORE }}
          USERNAME: ${{ secrets.USERNAME }}
        run: |  
          echo "Organizing downloaded results..."  
          git config --global --add safe.directory "$(pwd)"  
    
          # Merge downloaded chunk outputs into ./results/<parent>/
          mkdir -p results  
          find temp_results -type f -name "puredns_result.txt" | while read -r filepath; do  
            parent="$(basename "$(dirname "$filepath")")"  
            mkdir -p "results/$parent"  
            cat "$filepath" | anew -q "results/$parent/puredns_result.txt"  
          done || true  
    
          if [ ! -d "results" ] || [ -z "$(ls -A results)" ]; then  
            echo "Results directory is empty or missing. Nothing to push."  
            exit 0  
          fi  
    
          git config --global user.name "Account2 PureDNS Bot"  
          git config --global user.email "actions-bot@users.noreply.github.com"  
    
          # Clone the private store-recon repo  
          mkdir -p results  
          find temp_results -type f -name "puredns_result.txt" | while read -r filepath; do  
            parent="$(basename "$(dirname "$filepath")")"  
            mkdir -p "results/$parent"  
            cat "$filepath" | anew -q "results/$parent/puredns_result.txt"  
          done || true  
    
          if [ ! -d "results" ] || [ -z "$(ls -A results)" ]; then  
            echo "Results directory is empty or missing. Nothing to push."  
            exit 0  
          fi  
    
    
          # retry up to 5 times to handle concurrent updates  
          for i in {1..5}; do  
            git fetch origin main  
            git checkout main  
            git pull --rebase origin main  
    
            git add results/  
            if git diff --cached --quiet; then  
              echo "No changes to commit in store-recon."  
              exit 0  
            fi  
    
            git commit -m "Add/Update puredns+dsieve results (Primary Run: ${{ github.event.inputs.primary_run_id || github.run_id }})"  
            if git push origin main; then  
              echo "Pushed to store-recon successfully on attempt #$i."  
              exit 0  
            else  
              echo "Push to store-recon failed on attempt #$i, retrying..."  
              git reset --hard origin/main  
            fi  
          done  
    
          echo "ERROR: Could not push results to store-recon after 5 attempts."  
          exit 1  
       
 
