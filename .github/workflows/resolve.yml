name: PureDNS Secondary Worker

on:
  workflow_dispatch:
    inputs:
      primary_github_server_url:
        description: 'The server URL of the primary GitHub instance (e.g., https://github.com)'
        required: true
        type: string
      primary_repo_owner:
        description: 'The owner of the primary repository that triggered this workflow.'
        required: true
        type: string
      primary_repo_name:
        description: 'The name of the primary repository that triggered this workflow.'
        required: true
        type: string
      primary_run_id:
        description: 'The run ID of the workflow in the primary repository.'
        required: true
        type: string
      chunk_package_artifact_name:
        description: 'The name of the artifact package containing all chunks and resolvers.'
        required: true
        type: string
      secondary_matrix_json:
        description: 'The JSON string representing the matrix of chunks assigned to this secondary worker.'
        required: true
        type: string

permissions:
  contents: write
  actions: read

env:
  SECONDARY_ACCOUNT_MAX_PARALLEL: 20

jobs:
  process_assigned_chunks_secondary:
    name: Process Assigned Chunks (Secondary Account)
    #if: github.event.inputs.secondary_matrix_json != '' && github.event.inputs.secondary_matrix_json != '[]'
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/pcoder7/spider-puredns-actions:latest
      credentials:
        username: ${{ secrets.GHCR_USER }}
        password: ${{ secrets.GHCR_TOKEN }}
    strategy:
      fail-fast: false
      max-parallel: 20
      matrix:
        pair: ${{ fromJson(github.event.inputs.secondary_matrix_json && github.event.inputs.secondary_matrix_json || '[]') }}
    steps:

      - name: Display Trigger Payload (Debug)
        run: |
          echo "SECONDARY WORKER: Received payload:"
          echo "${{ toJson(github.event.inputs) }}"
          echo "---"
          echo "SECONDARY WORKER: My assigned matrix for this job instance:"
          echo "${{ toJson(matrix.pair) }}"

      - name: Checkout repository (Account 2's repo)
        uses: actions/checkout@v3

      - name: Download Full Chunks Package from Primary Account
        env:
          GH_TOKEN_PRIMARY_ACCOUNT_READ: ${{ secrets.PAT_FOR_PRIMARY_ACCOUNT_ARTIFACTS_READ }}
          PRIMARY_REPO_OWNER: ${{ github.event.inputs.primary_repo_owner }}
          PRIMARY_REPO_NAME: ${{ github.event.inputs.primary_repo_name }}
          PRIMARY_RUN_ID: ${{ github.event.inputs.primary_run_id }}
          ARTIFACT_NAME_FROM_PRIMARY: ${{ github.event.inputs.chunk_package_artifact_name }}
        shell: bash
        run: |
          echo "SECONDARY WORKER: Downloading artifact '$ARTIFACT_NAME_FROM_PRIMARY' from $PRIMARY_REPO_OWNER/$PRIMARY_REPO_NAME, run ID $PRIMARY_RUN_ID"
          if ! command -v gh &> /dev/null; then
            echo "INFO: gh CLI not found. Installing..."
            apt-get update -qy
            apt-get install -qy curl
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            apt-get update -qy
            apt-get install -qy gh
            if ! command -v gh &> /dev/null; then
              echo "ERROR: gh CLI installation failed."
              exit 0
            fi
          fi

          echo "$GH_TOKEN_PRIMARY_ACCOUNT_READ" | gh auth login --with-token
          FULL_PRIMARY_REPO="$PRIMARY_REPO_OWNER/$PRIMARY_REPO_NAME"
          gh run download "$PRIMARY_RUN_ID" -R "$FULL_PRIMARY_REPO" -n "$ARTIFACT_NAME_FROM_PRIMARY" --dir .

          PACKAGE_FILENAME="$ARTIFACT_NAME_FROM_PRIMARY.tar.gz"
          if [ ! -f "$PACKAGE_FILENAME" ]; then
            echo "ERROR: Failed to download '$PACKAGE_FILENAME'."
            exit 0
          fi
          echo "Downloaded '$PACKAGE_FILENAME'."

      - name: Extract Chunks and Resolvers for Secondary
        shell: bash
        run: |
          PACKAGE_FILENAME="${{ github.event.inputs.chunk_package_artifact_name }}.tar.gz"
          echo "SECONDARY WORKER: Extracting $PACKAGE_FILENAME..."
          tar -xzvf "$PACKAGE_FILENAME"
          if [ ! -d "chunks" ] || [ ! -f "resolvers.txt" ]; then
            echo "ERROR: 'chunks/' or 'resolvers.txt' missing after extraction."
            exit 0
          fi
          echo "Extraction complete."
          ls -R chunks/
          ls resolvers.txt resolvers-trusted.txt

      - name: Install dsieve
        run: |
          if command -v dsieve &> /dev/null; then
            echo "dsieve is already installed"
          else
            echo "Installing dsieve..."
            go install github.com/trickest/dsieve@latest
          fi

      - name: Install Tools
        run: |
          # Installing smap
          if ! command -v smap >/dev/null; then
            echo "Installing smap…"
            go install -v github.com/s0md3v/smap/cmd/smap@latest
          else
            echo "smap already in cache"
          fi
          # Installing inscope
          if ! command -v inscope >/dev/null; then
            echo "Installing inscope…"
            go install -v github.com/tomnomnom/hacks/inscope@latest
          else
            echo "inscope already in cache"
          fi

          if ! command -v anew >/dev/null; then
            echo "Installing anew…"
            go install -v github.com/tomnomnom/anew@latest
          else
            echo "anew already in cache"
          fi

          if ! command -v cut-cdn >/dev/null; then
            echo "Installing cut-cdn…"
            go install github.com/ImAyrix/cut-cdn@latest
          else
            echo "cut-cdn already in cache"
          fi

          if ! command -v naabu >/dev/null; then
            echo "Installing naabu…"
            go install -v github.com/projectdiscovery/naabu/v2/cmd/naabu@latest
          else
            echo "naabu already in cache"
          fi

          pip3 install --no-cache-dir ipaddress

          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Fetch wordlists
        shell: bash
        run: |

          if [ ! -f resolvers.txt ]; then
              wget -qO resolvers.txt \
              https://raw.githubusercontent.com/rix4uni/resolvers/refs/heads/main/resolvers.txt
              echo "resolvers.txt is downloaded"
          fi
          if [ ! -f resolvers-trusted.txt ]; then
              wget -qO resolvers-trusted.txt \
              https://raw.githubusercontent.com/and0x00/resolvers.txt/refs/heads/main/resolvers.txt
              echo "resolvers-trusted.txt is downloaded"
          fi

      - name: Run puredns + pre-dsieve on subdomains + final filtering      
        id: run_puredns
        shell: bash
        run: |
          # The chunk file from the matrix is treated as the raw input
          RAW_RESULTS_FILE="${{ matrix.pair.chunk }}"
          PUREDNS_FILE="puredns_file.txt"
          RESOLVED_FILE="puredns_resolved.txt"
          TMP_CLEANMASSDNS=$(mktemp)
          MASSDNS="massdns.txt"
          MASSDNS_FILE="massdns_file.txt"
          
          if [ ! -s "$RAW_RESULTS_FILE" ]; then
            echo "INFO: Raw results file (chunk) is empty. Nothing to resolve."
            # Create empty files to prevent downstream errors
            touch "$PUREDNS_FILE" "$RESOLVED_FILE" "$MASSDNS_FILE"
            exit 0
          fi
          
          echo "INFO: Resolving subdomains using puredns..."
          # The puredns command itself remains unchanged as requested
          puredns resolve "$RAW_RESULTS_FILE" \
            -r resolvers.txt \
            --rate-limit 3000 \
            --skip-validation \
            --skip-wildcard-filter \
            --write "$PUREDNS_FILE" \
            --write-massdns "$MASSDNS" \
            --quiet >/dev/null 2>&1
                               
          echo "✅ PureDNS resolution complete. $(wc -l < "$PUREDNS_FILE") subdomains were successfully resolved."
          
          # Scoping is now applied *after* resolution
          cat "$PUREDNS_FILE" | inscope -s .scope > "$RESOLVED_FILE" || true
          
          # Also scope the massdns results to ensure A-records are for target domains
          awk 'NF { sub(/\.$/,"",$1); print }' "$MASSDNS" > "$TMP_CLEANMASSDNS"
          awk ' \
          {gsub(/\r$/,"");sub(/^[ \t]+/,"");sub(/[ \t]+$/,"")} \
          FNR==NR{if($0)patterns[++c]=$0;next} \
          !setup{regex="";for(i=1;i<=c;i++){regex=regex (i>1?"|":"") "("patterns[i]")"};if(regex=="")regex="^\b$";setup=1} \
          $2=="A" && $1~regex \
          ' .scope "$TMP_CLEANMASSDNS" | anew -q "$MASSDNS_FILE"
          
          echo "✅ MassDNS processing complete. $(wc -l < "$MASSDNS_FILE") in-scope massdns records found."
          
          # Cleanup intermediate files
          rm -f "$TMP_CLEANMASSDNS" "$MASSDNS" "$PUREDNS_FILE"
          
      - name: Map subdomains to ports with CDN filtering
        id: map_subdomains_cdn
        shell: bash
        run: |
          set -e
          trap '' SIGPIPE
          MASSDNS_FILE="massdns_file.txt"
          SMAP_FILE="smap.txt"
          OUTPUT="subdomain_ports.txt"
          PORTS="1,43,49,70,79,80,81,82,83,84,85,88,102,104,113,135,139,143,175,179,195,264,280,389,443,444,505,515,548,554,591,631,771,783,789,888,898,900,901,993,995,1026,1080,1099,1153,1177,1200,1214,1220,1234,1311,1314,1344,1433,1503,1515,1521,1599,1723,1830,1900,1962,2000,2001,2002,2030,2064,2081,2087,2181,2222,2306,2345,2404,2455,2525,2715,2761,2762,3000,3001,3002,3052,3128,3260,3299,3310,3388,3389,3460,3531,3689,4000,4157,4242,4369,4443,4444,4500,4567,4711,4786,4899,5000,5001,5007,5009,5010,5025,5060,5222,5269,5280,5427,5432,5672,5800,5801,5802,5900,5938,6000,6001,6103,6346,6544,6600,6668,6699,6969,7002,7007,7070,7100,7171,7415,7776,8000,8001,8002,8003,8004,8005,8006,8007,8008,8009,8010,8080,8081,8082,8083,8084,8085,8087,8088,8118,8126,8181,8291,8443,8880,8881,8882,8883,8884,8885,8886,8887,8888,9000,9001,9002,9003,9030,9050,9080,9090,9100,9530,9600,9633,9999,10000,10001,10005,10134,11112,12345,13013,13666,15000,18245,20000,20256,20547,21379,25001,25565,31337,35000,37777,44818,50000,54138,55000,55555,60129"
          
          if [ ! -s "$MASSDNS_FILE" ]; then
            echo "INFO: massdns_file.txt is empty. Skipping port mapping."
            touch "$OUTPUT"
            exit 0
          fi
          
          # create per‑runner temp files
          TMP_IP2SUB=$(mktemp)
          TMP_IP_ONLY=$(mktemp)
          TMP_NONCDN=$(mktemp)
          TMP_CDN=$(mktemp)
          TMP_SMAP_NONCDN=$(mktemp)
          TMP_RUSTSCAN=$(mktemp)
          echo "▶ Cleaning & extracting A‑records from $MASSDNS_FILE…"
          # IP SUBDOMAIN
          awk '{ print $3, $1 }' "$MASSDNS_FILE" | sort -k1,1 > "$TMP_IP2SUB"
          echo "▶ Pulling unique IPs…"
          cut -d' ' -f1 "$TMP_IP2SUB" | sort -u > "$TMP_IP_ONLY"
          echo "▶ Filtering non‑CDN IPs with cut-cdn…"
          cat "$TMP_IP_ONLY" | cut-cdn -ua -t 50 -silent -o "$TMP_NONCDN"
          echo "✅ All done. TMP_IP_ONLY contains $(wc -l < "$TMP_IP_ONLY") IP"
          head -n5 "$TMP_IP_ONLY"
          echo "==================================================================="
          echo "✅ All done. TMP_NONCDN contains $(wc -l < "$TMP_NONCDN") IP"
          head -n5 "$TMP_NONCDN"
          echo "==================================================================="
          echo "▶ Deriving CDN IP list…"
          cat "$TMP_IP_ONLY" | anew -d "$TMP_NONCDN" > "$TMP_CDN"
          echo "✅ All done. TMP_CDN contains $(wc -l < "$TMP_CDN") IP"
          head -n5 "$TMP_CDN"
          echo "==================================================================="
          echo "▶ Running smap and rustscan on non‑CDN IPs…"
          
          
          naabu -l "$TMP_NONCDN" -passive -o "$TMP_SMAP_NONCDN" -no-color -silent || true
          # The rustscan command itself remains unchanged as requested
          rustscan -a "$TMP_NONCDN" -p "PORTS" --no-banner -t 5000 --tries 1 -u 50000 --scan-order "Random" -b 300 --greppable --accessible > "$TMP_RUSTSCAN" || true
          
          cat "$TMP_RUSTSCAN" | awk -F ' -> ' '{ gsub(/[\[\]]/, "", $2); n = split($2, p, ","); for(i=1;i<=n;i++) print $1 ":" p[i] }' | anew -q "$TMP_SMAP_NONCDN" || true
          
          echo "✅ All done. TMP_SMAP_NONCDN contains $(wc -l < "$TMP_SMAP_NONCDN") IP" 
          echo "==================================================================="
          head -n50 "$TMP_SMAP_NONCDN"
          echo "==================================================================="
          
          echo "▶ Merging non‑CDN and CDN IP lists into $SMAP_FILE…"
          cat "$TMP_SMAP_NONCDN" "$TMP_CDN" | sort -u > "$SMAP_FILE"
          echo "✅ All done. SMAP_FILE contains $(wc -l < "$SMAP_FILE") IP" 
          echo "==================================================================="
          head -n50 "$SMAP_FILE"
          echo "==================================================================="
          echo "▶ Joining with $SMAP_FILE to produce subdomain:port or subdomain…"
          awk -F: '
            NF==2 { print $1, $2 }
            NF==1 { print $1, ""  }
          ' "$SMAP_FILE" \
            | sort -k1,1 \
            | join - "$TMP_IP2SUB" \
            | { 
              awk '
                NF >= 2 { 
                  if (NF == 3 && $2 ~ /^[0-9]+$/) { 
                    print $3 ":" $2 
                  } else { 
                    print $NF 
                  } 
                }
              '       
            } \
            > "$OUTPUT"
          echo "✅ Generated $OUTPUT (first 50 lines):"
          head -n50 "$OUTPUT"
          # cleanup
          rm -f "$TMP_IP2SUB" "$TMP_IP_ONLY" "$TMP_NONCDN" "$TMP_CDN" "$TMP_SMAP_NONCDN" "$TMP_RUSTSCAN"   
          
      - name: Sort Resolved Results into Root Domain Folders
        shell: bash
        run: |
          RESOLVED_FILE="puredns_resolved.txt"
          PORTS_INPUT_FILE="subdomain_ports.txt"
        
          echo "INFO: Sorting resolved results into root-domain specific files..."
          mkdir -p results 
          
          if [ ! -s "$RESOLVED_FILE" ] && [ ! -s "$PORTS_INPUT_FILE" ]; then
            echo "INFO: No resolved domains or port data to sort."
            exit 0
          fi
          
          # First, find which root domains are present in our *resolved* results
          dsieve -if "$RESOLVED_FILE" -f 2 | sort -u > temp_root_domains.txt
          
          echo "INFO: Found the following root domains to process:"
          cat temp_root_domains.txt
          
          # Now, loop through those root domains and extract their subdomains
          while read -r parent; do
            if [ -z "$parent" ]; then continue; fi
            mkdir -p "results/$parent"
            
            # Sort the simple puredns results
            outfile="results/$parent/puredns_results.txt"
            echo "  -> Filtering puredns results for '$parent' into '$outfile'"
            grep -E "(^|\\.)${parent//./\\.}(\$)" --color=never "$RESOLVED_FILE" | anew -q "$outfile" || true
            
            # Sort the enriched subdomain:port results
            ports_outfile="results/$parent/subdomain_ports.txt"
            echo "  -> Filtering port data for '$parent' into '$ports_outfile'"
            grep -E "(^|\\.)${parent//./\\.}(\:|\$)" --color=never "$PORTS_INPUT_FILE" | anew -q "$ports_outfile" || true
            
          done < temp_root_domains.txt
          rm temp_root_domains.txt

      - name: Compute SAFE_CHUNK (no slashes)
        run: |
          SAFE_CHUNK="${{ matrix.pair.chunk }}"
          SAFE_CHUNK="$(echo "$SAFE_CHUNK" | tr '/' '_')"
          echo "SAFE_CHUNK=$SAFE_CHUNK" >> $GITHUB_ENV

      - name: Upload Secondary Account Results
        uses: actions/upload-artifact@v4
        with:
          name: recon-results-secondary-${{ env.SAFE_CHUNK }}
          path: results/
          retention-days: 1

  # ====================================================================
  # JOB 4: Merge All Results (Identical to reference workflow)
  # ====================================================================
  merge_results:
    name: Merge All Distributed Results
    runs-on: ubuntu-latest
    needs: process_assigned_chunks_secondary    
    if: always()
    outputs:
      has_results: ${{ steps.check_artifacts.outputs.found }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
     
      - name: Download all result artifacts from all accounts
        uses: actions/download-artifact@v4
        with:
          pattern: 'recon-results-*'
          path: temp-aggregated-results
          merge-multiple: true
     
      - name: Check if artifacts were downloaded
        id: check_artifacts
        shell: bash
        run: |
          if [ -d "temp-aggregated-results" ] && [ -n "$(ls -A temp-aggregated-results)" ]; then
            echo "-> Artifacts found. Proceeding with merge."
            echo "found=true" >> $GITHUB_OUTPUT
          else
            echo "-> No artifacts found to merge. Skipping the rest of this job."
            echo "found=false" >> $GITHUB_OUTPUT
          fi
          
      
      - name: Consolidate all results into root domain folders
        id: consolidate
        shell: bash
        run: |
          set -e
          mkdir -p final_results
          if [ ! -d "temp-aggregated-results" ] || [ -z "$(ls -A temp-aggregated-results)" ]; then
            echo "::warning:: No result artifacts were found. Nothing to merge."
            echo "has_results=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "INFO: Aggregating all downloaded results..."
          for filepath in $(find temp-aggregated-results -type f -name "puredns_results.txt"); do
            parent_domain=$(basename "$(dirname "$filepath")")
            dest_file="final_results/$parent_domain/puredns_results.txt"
            mkdir -p "final_results/$parent_domain"
            cat "$filepath" >> "$dest_file"
          done
          echo "INFO: Aggregating subdomain port data..."
          for filepath in $(find temp-aggregated-results -type f -name "subdomain_ports.txt"); do
            parent_domain=$(basename "$(dirname "$filepath")")
            dest_file="final_results/$parent_domain/subdomain_ports.txt"
            mkdir -p "final_results/$parent_domain"
            cat "$filepath" >> "$dest_file"
          done
          echo "INFO: De-duplicating all aggregated files..."
          for final_file in $(find final_results -type f -name "*.txt"); do
              sort -u -o "$final_file" "$final_file"
          done
          if [ -z "$(ls -A final_results)" ]; then
            echo "::warning:: Result artifacts contained no valid data to merge."
            echo "has_results=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "has_results=true" >> $GITHUB_OUTPUT
          echo "✅ Successfully consolidated results from all accounts."
          ls -R final_results

      - name: Upload Final Consolidated Artifact
        if: steps.consolidate.outputs.has_results == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-recon-results
          path: final_results/
          retention-days: 1

  commit_all_results:
    name: Commit All Results
    needs: merge_results
    if: always() && needs.merge_results.outputs.has_results == 'true'
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/pcoder7/spider-puredns-actions:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN }}
    steps:
      - name: Download the single consolidated results artifact
        uses: actions/download-artifact@v4
        with:
          name: consolidated-recon-results
          path: final_results

      - name: Organize and Push to store-recon
        shell: bash
        env:
          STORE_RECON_PAT: ${{ secrets.PAT_FOR_SECONDARY }}
          ACCOUNT2_USERNAME: ${{ secrets.ACCOUNT2_REPO_OWNER }}
          STORE: ${{secrets.STORE}}
          CORRELATION_ID: ${{ github.event.inputs.primary_run_id }}
        run: |
          RESULTS_DIR="${GITHUB_WORKSPACE}/final_results"

          if [ ! -d "$RESULTS_DIR" ] || [ -z "$(ls -A "$RESULTS_DIR")" ]; then
            echo "::warning:: Results directory is empty or does not exist. Nothing to commit."
            exit 0
          fi
          
          echo "Cloning ${STORE} to commit results from secondary worker..."
          git config --global user.name "Secondary Worker Bot"
          git config --global user.email "actions-bot@users.noreply.github.com"
          
          TMP_DIR="$(mktemp -d)"
          if ! git clone "https://x-access-token:${STORE_RECON_PAT}@github.com/${ACCOUNT2_USERNAME}/${STORE}.git" "$TMP_DIR"; then
            echo "::error:: Failed to clone the repository. Aborting the commit process."
            exit 0
          fi
          cd "$TMP_DIR"
          
          # --- Reusable function to merge artifact data ---
          run_merge() {
            echo "Merging new secondary results into the repository..."
            for domain_dir in "${RESULTS_DIR}"/*; do
              if [ ! -d "$domain_dir" ]; then continue; fi
              domain_name=$(basename "$domain_dir")
              dest_repo_dir="results/$domain_name"
              mkdir -p "$dest_repo_dir"

              # SAFE MERGE 1 (Unchanged as requested)
              source_puredns_file="$domain_dir/puredns_results.txt"
              dest_all_subs_file="$dest_repo_dir/all_subdomains.txt"
              if [ -s "$source_puredns_file" ]; then
                <"$source_puredns_file" tr -d '\0' \
                  | grep '[[:alnum:]]' \
                  | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' \
                  | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g" \
                  > "$source_puredns_file.tmp" && mv "$source_puredns_file.tmp" "$source_puredns_file"   
                  
                temp_merged_file_1=$(mktemp)
                if [ -f "$dest_all_subs_file" ]; then cat "$source_puredns_file" "$dest_all_subs_file" | sort -u > "$temp_merged_file_1"; else sort -u "$source_puredns_file" > "$temp_merged_file_1"; fi
                mv "$temp_merged_file_1" "$dest_all_subs_file"
              fi
              
              # SAFE MERGE 2 (Unchanged as requested)
              source_ports_file="$domain_dir/subdomain_ports.txt"
              dest_puredns_file="$dest_repo_dir/puredns_result.txt"
              if [ -s "$source_ports_file" ]; then
                <"$source_ports_file" tr -d '\0' \
                  | grep '[[:alnum:]]' \
                  | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' \
                  | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g" \
                  > "$source_ports_file.tmp" && mv "$source_ports_file.tmp" "$source_ports_file"

                echo "  -> Merging port data into '$dest_puredns_file'"  
                temp_merged_file_2=$(mktemp)
                if [ -f "$dest_puredns_file" ]; then cat "$source_ports_file" "$dest_puredns_file" | sort -u > "$temp_merged_file_2"; else sort -u "$source_ports_file" > "$temp_merged_file_2"; fi
                mv "$temp_merged_file_2" "$dest_puredns_file"
              fi
            done
            
            # Stage all changes
            git add results/
          }

          # --- Main Logic ---

          # 1. Perform the initial merge and check for changes
          run_merge
          if git diff --cached --quiet; then
            echo "No new unique data to commit from secondary worker."
            exit 0
          fi
          
          # 2. Commit the changes locally
          echo "Committing changes locally..."
          git commit -m "feat: Add new assets from distributed permutation scan from Correlation ID: ${CORRELATION_ID}"
          
          # 3. Loop to sync and push the commit, with a robust retry mechanism
          MAX_ATTEMPTS=10
          for (( i=1; i<=MAX_ATTEMPTS; i++ )); do
            echo "[Attempt $i/$MAX_ATTEMPTS] Pushing changes..."
            
            # Optimistic push first
            if git push -v origin main; then
              echo "✅ Successfully pushed new secondary results to ${STORE} on attempt $i."
              exit 0 # Success!
            fi
            
            echo "::warning:: Push failed on attempt $i. Fetching latest changes from remote and re-applying local changes."
            
            # If push failed, fetch the latest state from the remote
            git fetch origin main
            if [ $? -ne 0 ]; then
                echo "::error:: Git fetch failed. Cannot safely retry."
                sleep $(( 5 * i ))
                continue # Try again
            fi
            
            # Reset local state to match remote, discarding the old local commit
            git reset --hard origin/main
            
            # Re-run the merge logic on top of the fresh, updated branch
            echo "Re-applying merge logic on top of the updated main branch..."
            run_merge
            
            # Check if there are still changes to commit after the re-merge
            if git diff --cached --quiet; then
              echo "No net new changes to commit after syncing with remote. Another run may have already pushed these results."
              exit 0
            fi
            
            # Re-commit the newly calculated changes
            echo "Re-committing changes for retry attempt..."
            git commit -m "feat: Add new assets from distributed permutation scan from Correlation ID: ${CORRELATION_ID} (retry)"

            sleep $(( 5 * i ))
          done

          echo "::error:: All $MAX_ATTEMPTS push attempts failed. The job will pass but the commit was NOT pushed."
          exit 0
 
